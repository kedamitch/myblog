var rp = require('fatfei.provider.loader');
var util = require('util');
var userRedis = rp.dao.userRedis;
var commonUtil = require('fatfei.common.util');


/*
    目前用户模块仅支持自身用户的登录，权限的验证基于cookie

    TODO:
        1. 实现session， session中缓存用户的信息
        2. 支持第三方登录
        3. https
 */

var userModule = {

    login: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var username = fields.username,
                pwd = fields.pwd;
            if (!username || !pwd) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }

            userRedis.getUserInfo(username, function(err, userInfo) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: 'get userInfo from db fails: ' + util.inspect(err)
                    });
                } else {

                    if (!userInfo) {
                        ctx.responseData({
                            err: 1200,
                            data: '用户不存在'
                        });
                        return;
                    }
                    if (pwd !== userInfo.password) {
                        ctx.responseData({
                            err: 1200,
                            data: '密码错误'
                        });
                    } else {
                        var token = userModule.genToken(username, pwd);
                        ctx.responseData({
                            err: 0,
                            data: userInfo
                        }, [{
                            key: 'blog_tk',
                            value: token,
                            age: 7 * 3600 * 24 //一周
                        }]);
                        //update userInfo
                        userInfo.token = token;
                        userRedis.addUser(username, userInfo, function(err) {});
                    }
                }
            });
        });
    },

    setRole: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var name = fields.name,
                role = fields.role;
            if (!name || !role) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userModule.validateInternal(cookies, function(isValid, _userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: 'bad token'
                    });
                } else if (_userInfo.role !== 'admin') {
                    ctx.responseData({
                        err: 1003,
                        data: 'permission deny'
                    });
                } else {
                    userRedis.getUserInfo(name, function(err, userInfo) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'get userInfo from db fails: ' + util.inspect(err)
                            });
                        } else {
                            if (!userInfo) {
                                ctx.responseData({
                                    err: 1200,
                                    data: '用户不存在'
                                });
                                return;
                            }
                            userInfo.username = name;
                            userRedis.addUser(name, userInfo, function(err) {
                                if (err) {
                                    ctx.responseData({
                                        err: 1200,
                                        data: 'set userInfo to db fails: ' + util.inspect(err)
                                    });
                                } else {
                                    ctx.responseData({
                                        err: 0,
                                        data: 'success'
                                    });
                                }
                            });
                        }
                    });
                }
            });
        });
    },

    register: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var username = fields.username,
                pwd = fields.pwd;
            if (!username || !pwd) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userRedis.getUserInfo(username, function(err, userInfo) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: util.inspect(err)
                    });
                } else {
                    if (userInfo) {
                        ctx.responseData({
                            err: 1200,
                            data: "用户已存在"
                        });
                    } else {
                        var token = userModule.genToken(username, pwd);
                        userRedis.addUser(username, {
                            username: username,
                            password: pwd,
                            token: token
                        }, function(err) {
                            if (err) {
                                ctx.responseData({
                                    err: 1200,
                                    data: "add user to db fails: " + util.inspect(err)
                                });
                            } else {
                                ctx.responseData({
                                    err: 0,
                                    data: "success"
                                });
                            }
                        });
                    }
                }
            });
        });
    },

    //used to valid user cookie
    validate: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            userModule.validateInternal(cookies, function(isValid, userInfo) {
                ctx.responseData({
                    err: 0,
                    data: {
                        isValid: isValid,
                        userInfo: userInfo
                    }
                });
            });
        });
    },

    //验证用户token， 如果验证通过，返回用户信息
    validateInternal: function(cookies, cb) {
        var tk = cookies.blog_tk;
        if (!tk || !tk.value) {
            cb(false);
            return;
        }
        try {
            var cookieData = JSON.parse(commonUtil.Base64.decode(tk.value));
        } catch (e) {
            cb(false);
            return;
        }
        console.info(util.inspect(cookieData));
        if ((Date.now - cookieData.t) > 7 * 24 * 3600 * 1000) { //toke过期
            cb(false);
            return;
        }

        userRedis.getUserInfo(cookieData.u, function(err, userInfo) {
            if (err) {
                cb(false);
                return;
            }

            if (!userInfo) {
                cb(false);
                return;
            }

            var pwdMd5 = commonUtil.Md5.encode(userInfo.password);
            if (cookieData.s == pwdMd5) {
                delete userInfo.password; //不能返回用户密码
                cb(true, userInfo);
            } else {
                cb(false);
            }
        });
    },

    genToken: function(username, pwd) {
        var str = commonUtil.Md5.encode(pwd);
        return commonUtil.Base64.encode(JSON.stringify({
            u: username,
            t: Date.now(),
            s: str
        }));
    },

    isUserExists: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var username = fields.username;
            userRedis.getUserInfo(username, function(err, userInfo) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: util.inspect(err)
                    });
                } else {
                    if (userInfo) {
                        ctx.responseData({
                            err: 0,
                            data: true
                        });
                    } else {
                        ctx.responseData({
                            err: 0,
                            data: false
                        });
                    }
                }
            });
        });
    },

    //注册路由
    onRegister: function(router) {
        router.addHandler('/blog/login', userModule.login);
        router.addHandler('/blog/register', userModule.register);
        router.addHandler('/blog/validate', userModule.validate);
        router.addHandler('/blog/isuserexist', userModule.isUserExists);
        router.addHandler('/admin/setRole', userModule.setRole);
    }
};

module.exports = userModule;