var util = require('util');
var rp = require('fatfei.provider.loader');
var redis = require('redis');
var redisFactory = require('fatfei.factory.redisfactory');
// var settings = rp.providerSettings.dao;
var postPrefix = "post:";
var postListKey = "postList";
var postCateListPrefix = "postInCate:";
var commentListPrefix = "commentList:";

var blogDao = {

    //按照文章id存储文章
    addPostById: function(postId, postInfo, cb) {
        var key = postPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            var valmap = blogDao.convertMap(postInfo);
            client.hmset(key, valmap, function(err) {
                cb(err);
            });
        });
    },

    delPostById: function(postId, cate, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.del(postPrefix + postId, function(err1) {
                client.zrem(postListKey, postId, function(err2) {
                    if(cate) {
                        client.zrem(postCateListPrefix + cate, postId, function(err3) {
                            cb(err1 || err2 || err3);
                        });                            
                    } else {
                        cb(err1 || err2);
                    }
                    
                });

            });
        });
    },

    //把文章添加到指定的分类中
    addPostToCateList: function(cate, postId, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.zadd(postCateListPrefix + cate, parseInt(postId), postId, function(err) {
                cb(err);
            });
        });        
    },

    //获取指定分类的文章列表
    getPostIdsByCate: function(cate, start, count, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            if (!start) {
                start = '+inf';
            } else {
                start = '(' + start;
            }
            var zsetKey;
            if(cate) {
                zsetKey = postCateListPrefix + cate;
            } else {
                zsetKey = postListKey;
            }
            client.zrevrangebyscore(zsetKey, start, 0, 'limit', 0, count, function(err, ids) {
                cb(err, ids);
            });
        });        
    },

    delPostIdFromCateList: function(cate, postId, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            var zsetKey;
            if(cate) {
                zsetKey = postCateListPrefix + cate;
            } else {
                zsetKey = postListKey;
            }    
            client.zrem(zsetKey, postId, function(err) {
                cb(err);
            });      
        });      
    },

    //把文章添加到zset中
    addPostIdToList: function(postId, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.zadd(postListKey, parseInt(postId), postId, function(err) {
                cb(err);
            });
        });
    },

    //获取文章id列表
    getPostIdList: function(start, count, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            if (!start) {
                start = '+inf';
            } else {
                start = '(' + start;
            }
            client.zrevrangebyscore(postListKey, start, 0, 'limit', 0, count, function(err, ids) {
                cb(err, ids);
            });
        });
    },

    //批量获取指定id列表对应的文章
    getPostsByIds: function(postIds, cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            var multi = client.multi();
            for (var i = 0; i < postIds.length; i++) {
                var key = postPrefix + postIds[i];
                multi.hgetall(key);
            }
            multi.exec(function(err, posts) {
                var tmp = [];
                for (var i = 0; i < posts.length; i++) {
                    if(posts[i]) {
                        posts[i].tags = JSON.parse(posts[i].tags);
                        posts[i].time = parseInt(posts[i].time);
                        posts[i].commentCount = parseInt(posts[i].commentCount);
                        posts[i].viewCount = parseInt(posts[i].viewCount); 
                        tmp.push(posts[i]);                       
                    }
                }
                cb(err, tmp);
            });
        });
    },

    getPostCount: function(cb) {
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.zcard(postListKey, function(err, count) {
                cb(err, count);
            });
        });
    },

    //增加文章浏览数
    incVV: function(postId, count, cb) {
        var key = postPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.hincrby(key, 'viewCount', count, function(err) {
                cb(err);
            });
        });
    },

    //增加文章评论数
    incCV: function(postId, count, cb) {
        var key = postPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.hincrby(key, 'commentCount', count, function(err) {
                cb(err);
            });
        });
    },

    //评论文章
    addComment: function(postId, commentInfo, cb) {
        var key = commentListPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            var valmap = blogDao.convertMap(commentInfo);
            client.zadd(key, commentInfo.id, JSON.stringify(commentInfo), function(err) {
                cb(err);
            });
        });
    },

    //获取文章评论
    getComments: function(postId, start, count, cb) {
        var key = commentListPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            if (!start) {
                start = '+inf';
            } else {
                start = '(' + start;
            }
            client.zrevrangebyscore(key, start, 0, 'limit', 0, count, function(err, comments) {
                if (err) {
                    cb(err);
                } else {
                    var commentList = [];
                    for (var i = 0; i < comments.length; i++) {
                        var commentObj = JSON.parse(comments[i]);
                        commentList.push(commentObj);
                    }
                    cb(0, commentList);
                }
            });
        });
    },

    //获取文章评论数
    getCommentCount: function(postId, cb) {
        var key = postPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.hget(key, 'commentCount', function(err, count) {
                cb(err, count);
            });
        });
    },

    //删除评论
    deleteComment: function(postId, commentId, cb) {
        var key = commentListPrefix + postId;
        redisFactory(rp.providerSettings.dao.redis, function(err, client) {
            if (err) {
                cb(err);
                return;
            }
            client.zremrangebyscore(key, parseInt(commentId), parseInt(commentId), function(err) {
                cb(err);
            });
        });
    },

    //转换map，转换成可以直接redis hmset入库的map, val全是字符串
    convertMap: function(map) {
        var o = {};
        for (var _k in map) {
            var type = typeof map[_k];
            switch (type) {
                case "string":
                    o[_k] = map[_k];
                    break;
                case "number":
                    o[_k] = map[_k] + "";
                    break;
                case "object":
                    o[_k] = JSON.stringify(map[_k]);
                    break;
            }
        }
        return o;
    }

};

module.exports = blogDao;