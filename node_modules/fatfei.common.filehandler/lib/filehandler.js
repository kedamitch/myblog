var fs = require('fs'),
    url = require('url'),
    path = require('path'),
    mimes = require('../cfg/mimes'),
    expires = require('../cfg/expires'),
    commonUtil = require('fatfei.common.util'),
    settings;

exports.responseModelAndView = function(tmplName, model, ctx) {
    var request = ctx.request;
    var response = ctx.response;    
    var tmplPath = settings.tmplPath + "/" + tmplName;
    response.setHeader('Content-Type', 'text/html');
    fs.readFile(tmplPath, "utf8", function(err, data) {
        if(err) {
            module.responseError(ctx, 404, 'File Not Exist');
        } else {
            for(var key in model) {
                if(!/[${}]/.test(key)) {
                    var regex = new RegExp('\\$\\{\\s*' + key + '\\s*\\}', 'g');
                    data = data.replace(regex, model[key]);
                    var utf8data = commonUtil.utf8_encode(data);
                    response.writeHead(200, {
                        'Content-Length': utf8data.length
                    });
                    response.write(utf8data, "utf8");
                    response.end();                   
                }
            }

        }
    });
};

exports.createProvider = function(config) {
    settings = config;
    return module.exports;
};


exports.responseFile = function(filename, ctx) {
    var ext = path.extname(filename);
    var request = ctx.request;
    var response = ctx.response;

    // Remove version in pathname.
    filename = filename.replace(/v_[a-z0-9]*\//i, '');

    // Set mime header
    var contentType = mimes[ext] ? mimes[ext] : mimes['*'];
    if (contentType) {
        response.setHeader('Content-Type', contentType ? contentType : 'application/octet-stream');
    }

    fs.stat(filename, function(err, stat) {
        if (err) {
            module.responseError(ctx, 404, 'File Not Exist');
        } else {
            // Set expire header
            var maxAge = expires[ext] ? expires[ext] : expires['*'];
            if (maxAge) {
                var expiretime = new Date();
                expiretime.setTime(expiretime.getTime() + maxAge * 1000);
                response.setHeader("Expires", expiretime.toUTCString());
                response.setHeader("Cache-Control", "public, max-age=" + maxAge);
            }

            // Set last modified header
            var lastModified = stat.mtime.toUTCString();
            response.setHeader('Last-Modified', lastModified);

            // Process ifModifiedSince logic
            var ifModifiedSince = request.headers['if-modified-since'];
            if (ifModifiedSince && lastModified == ifModifiedSince) {
                response.writeHead(304, "Not Modified");
                response.end();
            } else {
                fs.readFile(filename, "binary", function(err, file) {
                    if (err) {
                        module.responseError(ctx, 500, 'Internal Server Error');
                    } else {
                        response.writeHead(200, {
                            'Content-Length': file.length
                        });
                        response.write(file, "binary");
                        response.end();
                    }
                });
            }
        }
    });
};

//handle error request
module.responseError = function(ctx, code, msg) {
    // Failed to handle the request.
    ctx.response.writeHead(code, msg);
    ctx.response.end();
};