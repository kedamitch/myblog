var rp = require('fatfei.provider.loader');
var util = require('util');
var userService = rp.user;
var filehandler = rp.filehandler;
var commonUtil = require('fatfei.common.util');
var blogRedis = rp.dao.blogRedis;

//分类列表
var cateList = [{
    key: "algorithm",
    name: "算法"
}, {
    key: "net",
    name: "计算机网络"
}, {
    key: "node",
    name: "nodejs"
}, {
    key: "java",
    name: "java"
}, {
    key: "design",
    name: "设计模式"
}, {
    key: "db",
    name: "数据库"
}, {
    key: "essay",
    name: "随笔"
}];

var articleList = [];
function loadPostBrief() {
    blogRedis.getPostIdsByCate(null, 0, 100, function(err, ids) {
        if (err) {
            console.info("error:" + util.inspect(err));
            return;
        }

        blogRedis.getPostsByIds(ids, function(err, posts) {
            if (err) {
                console.info("error:" + util.inspect(err));
                return;
            } else {
                var list = [];
                for(var i = 0; i < posts.length; i++) {
                    var post = posts[i];
                    var article = {
                        title: post.title,
                        tags: post.tags,
                        url: "http://www.fatfei.com/blog/detail.do?postId=" + post.id
                    };
                    list.push(article);
                }
                articleList = list;
            }
        });
    });
}

var blog = {

    pubPost: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var title = fields.title,
                content = fields.content,
                abstract = fields.abstract,
                tags = fields.tags,
                cate = fields.cate;
            if (!title || !content || !abstract) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userService.validateInternal(cookies, function(isValid, userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: '请先登录'
                    });
                } else {
                    tags = (tags || "").split(',');
                    var postId = commonUtil.generateTimeBasedId();
                    var postInfo = {
                        id: postId,
                        title: title,
                        author: userInfo.username,
                        abstract: abstract,
                        content: content,
                        time: Date.now(),
                        cate: cate,
                        tags: tags,
                        viewCount: 0,
                        commentCount: 0
                    };
                    blogRedis.addPostById(postId, postInfo, function(err) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'add post fails: ' + util.inspect(err)
                            });
                            return;
                        }
                        blogRedis.addPostIdToList(postId, function(err) {
                            if (err) {
                                ctx.responseData({
                                    err: 1200,
                                    data: 'add post fails: ' + util.inspect(err)
                                });
                                return;
                            }
                            if (!cate) {
                                ctx.responseData({
                                    err: 0,
                                    data: {
                                        msg: "success",
                                        id: postId
                                    }
                                });
                            } else {
                                blogRedis.addPostToCateList(cate, postId, function(err) {
                                    if (err) {
                                        ctx.responseData({
                                            err: 1200,
                                            data: 'add post fails: ' + util.inspect(err)
                                        });
                                        return;
                                    } else {
                                        ctx.responseData({
                                            err: 0,
                                            data: {
                                                msg: "success",
                                                id: postId
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    });
                }
            });
        });
    },

    editPost: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId,
                title = fields.title,
                content = fields.content,
                abstract = fields.abstract,
                tags = fields.tags || "",
                cate = fields.cate;
            if (!postId || !title || !content || !abstract) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userService.validateInternal(cookies, function(isValid, userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: '请先登录'
                    });
                } else {
                    tags = tags.split(',');
                    blogRedis.getPostsByIds([postId], function(err, postArrays) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'bad postId' + util.inspect(err)
                            });
                            return;
                        }
                        if (!postArrays || !postArrays[0]) {
                            ctx.responseData({
                                err: 0,
                                data: 'success'
                            });
                            return;
                        }
                        var oldCate = postArrays[0].cate;
                        var postInfo = {
                            updateTime: Date.now(),
                            id: postId,
                            title: title,
                            content: content,
                            cate: cate,
                            tags: tags,
                            author: postArrays[0].author,
                            abstract: abstract,
                            time: postArrays[0].time,
                            viewCount: postArrays[0].viewCount,
                            commentCount: postArrays[0].commentCount
                        };
                        blogRedis.addPostById(postId, postInfo, function(err) {
                            if (err) {
                                ctx.responseData({
                                    err: 1200,
                                    data: 'add post fails: ' + util.inspect(err)
                                });
                                return;
                            }
                            if (oldCate !== cate) {
                                blogRedis.delPostIdFromCateList(oldCate, postId, function(err1) {
                                    blogRedis.addPostToCateList(cate, postId, function(err2) {
                                        if (err1 || err2) {
                                            ctx.responseData({
                                                err: 1200,
                                                data: 'edit post fails: ' + util.inspect(err1 || err2)
                                            });
                                        } else {
                                            ctx.responseData({
                                                err: 0,
                                                data: "success"
                                            });
                                        }
                                    });
                                });
                            } else {
                                ctx.responseData({
                                    err: 0,
                                    data: "success"
                                });
                            }
                        });
                    });
                }
            });
        });
    },

    getPostById: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId;
            if (!postId) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            blogRedis.getPostsByIds([postId], function(err, postArrays) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: 'get post fails: ' + util.inspect(err)
                    });
                    return;
                }
                if (!postArrays || !postArrays[0]) {
                    ctx.responseData({
                        err: 1200,
                        data: 'get post fails !'
                    });
                    return;
                }
                ctx.responseData({
                    err: 0,
                    data: postArrays[0]
                });
            });
        });
    },

    getPosts: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var startId = fields.start,
                count = parseInt(fields.count || 10),
                cate = fields.cate;
            blogRedis.getPostIdsByCate(cate, startId, count, function(err, ids) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: 'get posts fails: ' + util.inspect(err)
                    });
                    return;
                }

                blogRedis.getPostsByIds(ids, function(err, posts) {
                    if (err) {
                        ctx.responseData({
                            err: 1200,
                            data: 'get posts fails: ' + util.inspect(err)
                        });
                    } else {
                        blogRedis.getPostCount(function(err, totalCount) {
                            if (err) {
                                ctx.responseData({
                                    err: 1200,
                                    data: 'get post count fails: ' + util.inspect(err)
                                });
                            } else {
                                ctx.responseData({
                                    err: 0,
                                    data: {
                                        total: totalCount,
                                        posts: posts
                                    }
                                });
                            }
                        });
                    }
                });
            });
        });
    },

    getCateList: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            ctx.responseData({
                err: 0,
                data: cateList
            });
        });
    },

    incvv: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId;
            if (!postId) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            if (cookies["posts" + postId]) {
                ctx.responseData({
                    err: 0,
                    data: 'has viewed'
                });
                return;
            }

            blogRedis.incVV(postId, 1, function(err) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: util.inspect(err)
                    });
                } else {
                    ctx.responseData({
                        err: 0,
                        data: 'success'
                    }, [{
                        key: "posts" + postId,
                        value: "1",
                        age: 10 * 365 * 3600 * 24 //一周
                    }]);
                }
            });
        });
    },

    deletePost: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId;
            if (!postId) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userService.validateInternal(cookies, function(isValid, userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: '请先登录'
                    });
                } else {
                    blogRedis.getPostsByIds([postId], function(err, postArrays) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'bad postId' + util.inspect(err)
                            });
                            return;
                        }
                        if (!postArrays || !postArrays[0]) {
                            ctx.responseData({
                                err: 0,
                                data: 'success'
                            });
                            return;
                        }
                        blogRedis.delPostById(postId, postArrays[0].cate, function(err) {
                            if (err) {
                                ctx.responseData({
                                    err: 1200,
                                    data: 'del post fails: ' + util.inspect(err)
                                });
                            } else {
                                ctx.responseData({
                                    err: 0,
                                    data: 'success'
                                });
                            }
                        });
                    });
                }
            });
        });
    },

    comment: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId,
                content = fields.content;
            if (!postId || !content) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userService.validateInternal(cookies, function(isValid, userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: '请先登录'
                    });
                } else {
                    var commentId = commonUtil.generateTimeBasedId();
                    var commentInfo = {
                        id: commentId,
                        author: userInfo.username,
                        postId: postId,
                        content: content,
                        time: Date.now()
                    };
                    blogRedis.addComment(postId, commentInfo, function(err) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'add comments fails: ' + util.inspect(err)
                            });
                        } else {
                            //文章评论数增加1
                            blogRedis.incCV(postId, 1);
                            ctx.responseData({
                                err: 0,
                                data: {
                                    msg: 'success',
                                    id: commentId
                                }
                            });
                        }
                    });
                }
            });
        });
    },

    getComments: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var startId = fields.start,
                count = parseInt(fields.count || 10),
                postId = fields.postId;
            if (!postId) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            blogRedis.getComments(postId, startId, count, function(err, comments) {
                if (err) {
                    ctx.responseData({
                        err: 1200,
                        data: 'get comments fails: ' + util.inspect(err)
                    });
                    return;
                }
                blogRedis.getCommentCount(postId, function(err, count) {
                    if (err) {
                        ctx.responseData({
                            err: 1200,
                            data: 'get comments count fails: ' + util.inspect(err)
                        });
                        return;
                    }
                    ctx.responseData({
                        err: 0,
                        data: {
                            total: count,
                            comments: comments
                        }
                    });
                });
            });
        });
    },

    deleteComment: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var commentId = fields.commentId,
                postId = fields.postId;
            if (!commentId || !postId) {
                ctx.responseData({
                    err: 1001,
                    data: 'invalid paramters'
                });
                return;
            }
            userService.validateInternal(cookies, function(isValid, userInfo) {
                if (!isValid) {
                    ctx.responseData({
                        err: 1002,
                        data: '请先登录'
                    });
                } else {
                    blogRedis.deleteComment(postId, commentId, function(err) {
                        if (err) {
                            ctx.responseData({
                                err: 1200,
                                data: 'delete comments fails: ' + util.inspect(err)
                            });
                        } else {
                            //文章评论数增加-1
                            blogRedis.incCV(postId, -1);
                            ctx.responseData({
                                err: 0,
                                data: 'success'
                            });
                        }
                    });
                }
            });
        });
    },

    //首页
    fontPage: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            filehandler.responseModelAndView("/blog/index.html", {
                category: JSON.stringify(cateList),
                articleList: JSON.stringify(articleList)
            }, ctx);
        });
    },

    newPostPage: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            filehandler.responseModelAndView("/blog/newPost.html", {
                category: JSON.stringify(cateList),
            }, ctx);
        });   
    },

    editPage: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            filehandler.responseModelAndView("/blog/edit.html", {
                category: JSON.stringify(cateList),
            }, ctx);
        });             
    },

    //详情页
    detailPage: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var postId = fields.postId;
            if (!postId) {
                filehandler.responseModelAndView("/blog/detail.html", {
                    category: JSON.stringify(cateList)
                }, ctx);               
                return;
            }
            blogRedis.getPostsByIds([postId], function(err, postArrays) {
                if (err) {
                    filehandler.responseModelAndView("/blog/detail.html", {
                        category: JSON.stringify(cateList)
                    }, ctx); 
                    return;
                }
                if (!postArrays || !postArrays[0]) {
                    filehandler.responseModelAndView("/blog/detail.html", {
                        category: JSON.stringify(cateList)
                    }, ctx);
                    return;
                }
                filehandler.responseModelAndView("/blog/detail.html", {
                    category: JSON.stringify(cateList),
                    article: JSON.stringify(postArrays[0])
                }, ctx);                 
            });
        });        
    },

    createProvider: function(config) {
        loadPostBrief();
        setInterval(loadPostBrief, 600000);
        return blog;
    },

    //注册路由
    onRegister: function(router) {
        //首页
        router.addHandler("/blog/index.do", blog.fontPage);
        //详情页
        router.addHandler("/blog/detail.do", blog.detailPage);

        router.addHandler("/blog/newPost.do", blog.newPostPage);
        router.addHandler("/blog/edit.do", blog.editPage);

        //接口
        router.addHandler('/blog/getPosts', blog.getPosts);
        router.addHandler('/blog/getPostById', blog.getPostById);
        router.addHandler('/blog/pubPost', blog.pubPost);
        router.addHandler('/blog/editPost', blog.editPost);
        router.addHandler('/blog/deletePost', blog.deletePost);
        router.addHandler('/blog/view', blog.incvv);
        router.addHandler('/blog/comment', blog.comment);
        router.addHandler('/blog/getComments', blog.getComments);
        router.addHandler('/blog/deleteComment', blog.deleteComment);
        router.addHandler('/blog/getCate', blog.getCateList);
    }
};

module.exports = blog;