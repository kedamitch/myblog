var fs = require('fs'),
    util = require('util'),
    cluster = require('cluster');

/**
 * Enable provider pattern as core architecture pattern.
 */
var rootProvider = {

    // provider settings
    providerSettings: {},

    // provider instances cache
    providerInstances: {},

    // initialize all provider
    initialize: function(settings, cb) {
        var modules = settings['Modules'];
        var modulesHash = {};
        for (var _key in modules) {
            if (cluster.isMaster && !modules[_key].master) {
                continue;
            }
            var modulesObj = {};
            var module = modules[_key];
            modulesObj['name'] = module['name'];
            modulesObj['module'] = module;
            modulesObj['ref'] = module['ref'] || [];
            modulesObj['loaded'] = false;
            if (module['name'] && module['implementation']) {
                modulesHash[module['name']] = modulesObj;
            }
        }
        //检查有无循环依赖
        if (rootProvider.checkDependence(modulesHash)) {
            load(modulesHash);
        } else {
            throw (new Error(-1, "dependence error!"));
        }
        cb();
    },

    checkDependence: function(modulesHash) {
        return true;
    },

    // get module setting by module name
    getSettings: function(name) {
        return rootProvider.providerSettings[name] || {};
    },

    getAllModuleNames: function() {
        return Object.getOwnPropertyNames(rootProvider.providerInstances);
    },

    resetModuleSettings: function(setting) {
        for (var name in setting) {
            var moduleobj = rootProvider[name];
            if (moduleobj) {
                rootProvider.providerSettings[name] = setting[name];
                moduleobj.resetSettings(setting);
            }
        }
    }
};

var load = function(modulesHash) {
    if (isLoaded(modulesHash)) {
        return;
    }
    for (var i in modulesHash) {
        var moduleobj = modulesHash[i];
        var ref = moduleobj["ref"];
        if (isLoaded(modulesHash, ref) && !moduleobj.loaded) {
            var provider = undefined;
            rootProvider.providerSettings[moduleobj["name"]] = moduleobj["module"]["settings"];
            var m = require(moduleobj["module"]["implementation"]);
            if (m.createProvider) {
                provider = m.createProvider(moduleobj["module"]["settings"]);
            } else {
                provider = m;
            }
            rootProvider[moduleobj["name"]] = provider;
            rootProvider.providerInstances[moduleobj["name"]] = provider;
            moduleobj.loaded = true;
        }
    }
    load(modulesHash);
};

var isLoaded = function(modulesHash, ref) {
    if (ref) {
        for (var i in ref) {
            var moduleobj = modulesHash[ref[i]];
            if (!moduleobj && cluster.isMaster) {
                continue;
            }
            if (!moduleobj) {
                throw (new Error(-1, "ref name " + ref[i] + " is not exists!"));
            }
            if (!moduleobj.loaded) {
                return false;
            }
        }
    } else {
        for (var i in modulesHash) {
            var moduleobj = modulesHash[i];
            if (!moduleobj.loaded) {
                return false;
            }
        }
    }
    return true;
};

module.exports = rootProvider;