var rp = require('fatfei.provider.loader');
var util = require('util');
var commonUtil = require('fatfei.common.util');
var path = require('path');
var fs = require('fs');

var config,
    settings;

var ueditorApi = {

    action: function(ctx) {
        ctx.getRequestArgs(function(err, fields, files, cookies) {
            var action = fields.action;
            switch (action) {
                case 'config':
                    /* 获取配置 */
                    ueditorApi.queryConfig(ctx, files);
                    break;
                case 'uploadimage':
                    /* 上传视频 */
                case 'uploadvideo':
                    /* 上传文件 */
                case 'uploadfile':
                    ueditorApi.uploadFile(ctx, action, files);
                    break;
                    /* 上传涂鸦 */
                case 'uploadscrawl':
                    ueditorApi.uploadscrawl(ctx, fields);
                    break;
                    /* 列出图片 */
                case 'listimage':
                    ueditorApi.listFiles(ctx, 'image', fields.start, fields.size);
                    break;
                    /* 列出文件 */
                case 'listfile':
                    ueditorApi.listFiles(ctx, 'file', fields.start, fields.size);
                    break;
                    /* 抓取远程文件 */
                case 'catchimage':
                    break;
                default:
                    ctx.responseData({
                        err: 1001,
                        data: 'invalid parameters'
                    });
            }
        });
    },

    queryConfig: function(ctx, files) {
        ctx.responseData(config);
    },

    mkdirs: function(dirname, cb) {
        fs.exists(dirname, function(exists) {
            if (exists) {
                cb();
            } else {
                ueditorApi.mkdirs(path.dirname(dirname), function() {
                    fs.mkdir(dirname, cb);
                });
            }
        });
    },

    uploadscrawl: function(ctx, fields) {
        var uploadConfig = {
            "pathFormat": config['scrawlPathFormat'],
            "maxSize": config['scrawlMaxSize'],
            "allowFiles": config['scrawlAllowFiles'],
            "oriName": "scrawl.png"
        };
        var fieldName = config['scrawlFieldName'];
        var picData = commonUtil.Base64.decode(fields[fieldName]);
        var subPath = ueditorApi.generatePath(uploadConfig.pathFormat) + '.png';
        var path = settings.ueditorRoot + subPath;
        if (picData.length > uploadConfig.maxSize) {
            ctx.responseData({
                "state": "文件过大"
            });
            return;
        }

        ueditorApi.mkdirs(require('path').dirname(path), function(err) {
            if (err) {
                ctx.responseData({
                    "state": "create dir fails: " + util.inspect(err)
                });
            } else {
                fs.writeFile(path, picData, 'binary', function(err) {
                    if (err) {
                        ctx.responseData({
                            "state": "create file fails: " + util.inspect(err)
                        });
                        return;
                    }
                    ctx.responseData({
                        "state": "SUCCESS",
                        "url": settings.staticPrefix + subPath,
                        "title": "scrawl.png",
                        "original": "scrawl.png"
                    });
                });
            }
        });
    },

    uploadFile: function(ctx, action, files) {
        switch (action) {
            case 'uploadimage':
                var uploadConfig = {
                    "pathFormat": config['imagePathFormat'],
                    "maxSize": config['imageMaxSize'],
                    "allowFiles": config['imageAllowFiles']
                };
                var fieldName = config['imageFieldName'];
                break;
            case 'uploadvideo':
                var uploadConfig = {
                    "pathFormat": config['videoPathFormat'],
                    "maxSize": config['videoMaxSize'],
                    "allowFiles": config['videoAllowFiles']
                };
                var fieldName = config['videoFieldName'];
                break;
            case 'uploadfile':
            default:
                var uploadConfig = {
                    "pathFormat": config['filePathFormat'],
                    "maxSize": config['fileMaxSize'],
                    "allowFiles": config['fileAllowFiles']
                };
                var fieldName = config['fileFieldName'];
                break;
        }
        var file = files[fieldName];
        if (!file) {
            ctx.responseData({
                "state": "未找到上传文件"
            });
            return;
        }
        if (file.size > uploadConfig.maxSize) {
            ctx.responseData({
                "state": "文件过大"
            });
            return;
        }
        var ext = file.name.replace(/.*(\.[^\.]*$)/, '$1');
        var subPath = ueditorApi.generatePath(uploadConfig.pathFormat) + ext;
        var path = settings.ueditorRoot + subPath;
        ueditorApi.mkdirs(require('path').dirname(path), function(err) {
            if (err) {
                ctx.responseData({
                    "state": "create dir fails: " + util.inspect(err)
                });
            } else {
                fs.rename(file.path, path, function(err) {
                    if (err) {
                        ctx.responseData({
                            "state": "rename file fails: " + util.inspect(err)
                        });
                        return;
                    }
                    ctx.responseData({
                        "state": "SUCCESS",
                        "url": settings.staticPrefix + subPath,
                        "title": file.name,
                        "original": file.name
                    });
                });
            }
        });
    },

    //仅支持两层
    listFiles: function(ctx, ftype, start, size) {
        var path = settings.ueditorRoot + 'upload/' + ftype;
        var files = [];
        start = parseInt(start || 0);
        size = parseInt(size || 9);
        fs.readdir(path, function(err, dirs) {
            if (err) {
                console.error(util.inspect(err));
            } else {
                var count = dirs.length;
                if (count == 0) {
                    ctx.responseData({
                        "state": "SUCCESS",
                        "list": [],
                        "start": start,
                        "total": 0
                    });
                    return;
                }
                var fileArray = [];
                for (var i = 0; i < dirs.length; i++) {
                    (function(filepath, dirname) {
                        fs.readdir(filepath, function(err, files) {
                            if (err) {
                                console.error(util.inspect(err));
                                count--;
                                if (count == 0) {
                                    fileArray.sort(function(u1, u2) {
                                        return u1.localeCompare(u2);
                                    });
                                    var array = [];
                                    for (var s = start; s < start + size; s++) {
                                        if (!fileArray[s]) {
                                            break;
                                        }
                                        array.push({
                                            url: fileArray[s]
                                        });
                                    }
                                    ctx.responseData({
                                        "state": "SUCCESS",
                                        "list": array,
                                        "start": start,
                                        "total": fileArray.length
                                    });
                                }
                            } else {
                                for (var j = 0; j < files.length; j++) {
                                    var url = settings.staticPrefix + 'upload/' + ftype + '/' + dirname + '/' + files[j];
                                    fileArray.push(url)
                                }
                                count--;
                                if (count == 0) {
                                    fileArray.sort(function(u1, u2) {
                                        return -u1.localeCompare(u2);
                                    });
                                    var array = [];
                                    for (var s = start; s < start + size; s++) {
                                        if (!fileArray[s]) {
                                            break;
                                        }
                                        array.push({
                                            url: fileArray[s]
                                        });
                                    }
                                    ctx.responseData({
                                        "state": "SUCCESS",
                                        "list": array,
                                        "start": start,
                                        "total": fileArray.length
                                    });
                                }
                            }
                        });
                    })(path + '/' + dirs[i], dirs[i]);

                }
            }
        });
    },

    generatePath: function(pathPattern) {
        var date = new Date();
        pathPattern = pathPattern.replace("{yyyy}", date.getFullYear());
        pathPattern = pathPattern.replace("{yy}", date.getYear());
        var month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : '0' + (date.getMonth() + 1);
        pathPattern = pathPattern.replace('{mm}', month);
        pathPattern = pathPattern.replace('{dd}', date.getDay());
        pathPattern = pathPattern.replace('{time}', date.getTime());
        var re = new RegExp("{rand:(\\d+)}");
        var matchs = re.exec(pathPattern);
        while (matchs && matchs[0] && matchs[1]) {
            re.lastIndex = 0;
            var count = parseInt(matchs[1]);
            if (count <= 0) {
                count = 3;
            }
            var randstr = '';
            for (var i = 0; i < count; i++) {
                randstr += parseInt(Math.random() * 10);
            }
            pathPattern = pathPattern.replace(matchs[0], randstr);
            matchs = re.exec(pathPattern);
        }
        return pathPattern;
    },

    //注册路由
    onRegister: function(router) {
        router.addHandler('/ueditor/action', ueditorApi.action);
    },

    createProvider: function(setting) {
        settings = setting;
        var path = require('path').dirname(module.filename) + '/config.json';

        fs.readFile(path, 'utf8', function(err, data) {
            if (err) {
                console.info('init ueditor fails');
            } else {
                var data = data.replace(/(\/\*[\s\S]+?\*\/)/g, '');
                config = JSON.parse(data);
            }
        });
        return ueditorApi;
    }
};

module.exports = ueditorApi;