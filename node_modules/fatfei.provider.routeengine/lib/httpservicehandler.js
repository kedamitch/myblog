/**
 * Startard service handler.
 *
 *         Address  --  http(s)://[host]/[service name]/[ver]/[api].[fmt](?cb=...&...)
 *
 */
var url = require('url'),
    formidable = require('formidable'),
    util = require('./util'),
    serviceCache = {};
var util2 = require('util');

module.exports = function(serviceFn) {
    return function(serveCtx) {
        serveCtx.getParsedUrl = function() {
            if (!serveCtx.parsedUrl) {
                parsedUrl = url.parse(serveCtx.request.url, true);
                serveCtx.parsedUrl = parsedUrl || {};
            }

            return serveCtx.parsedUrl;
        };

        //
        // 	Get querystring
        //
        serveCtx.getQueryString = function(name) {
            name = name.toLocaleLowerCase();
            if (!serveCtx.requestQs) {
                requestQs = serveCtx.getParsedUrl().query;
                //serveCtx.requestQs = requestQs || {};
                serveCtx.requestQs = {};
                for (var i in requestQs) {
                    serveCtx.requestQs[i.toLocaleLowerCase()] = requestQs[i];
                }
            }
            return serveCtx.requestQs[name];
        };

        //
        // 	This function will be called by serve implementation to provider serve
        //	ctx parameters. Such as: querystrings & post form
        //  modified by yefeizhang, add implementation to parse cookie
        //
        serveCtx.getRequestArgs = function(cb) {
            var cookies = {};
            if (serveCtx.request) {
                var cookiestr = serveCtx.request.headers['cookie'];
                var cookieArr = !! cookiestr ? cookiestr.split('; ') : [];
                for (var i = 0; i < cookieArr.length; i++) {
                    var cookieobj = {};
                    var kv = cookieArr[i].split('=');
                    if (kv.length === 2) {
                        cookieobj['key'] = kv[0];
                        cookieobj['value'] = kv[1];
                        cookies[kv[0]] = cookieobj;
                    }
                }
            }

            if (serveCtx.requestArgs) {
                return cb(0, serveCtx.requestArgs, serveCtx.Files, cookies);
            }

            if (!serveCtx.requestQs) {
                requestQs = serveCtx.getParsedUrl().query;
                serveCtx.requestQs = requestQs || {};
            }

            if (serveCtx.request.method === 'POST') {

                // Get post parameters. Only support form urlencode format here for now.

                // Set default submit mode.
                if (!serveCtx.request.headers['content-type']) {
                    serveCtx.request.headers['content-type'] = 'application/x-www-form-urlencoded';
                }

                var form = new formidable.IncomingForm();
                form.parse(serveCtx.request, function(err, fields, files) {
                    if (err) {
                        cb(err, 'Failed To Read Request Form');
                    }

                    for (var key in serveCtx.requestQs) {
                        fields[key] = fields[key] || serveCtx.requestQs[key];
                    }
                    cb(0, serveCtx.requestArgs = fields, serveCtx.requestFiles = files, cookies);
                });
            } else {
                cb(0, serveCtx.requestArgs = serveCtx.requestQs, {}, cookies);
            }
        };

        serveCtx.responseData = function(data, cookies) {
            responseJsonData(serveCtx, data, cookies);
        };

        serveCtx.ishttp = true;

        try {
            serviceFn(serveCtx);
        } catch (e) {
            serveCtx.getRequestArgs(function(err, req) {
                if (req.debug) {
                    serveCtx.responseData(1, e.stack);
                } else {
                    console.error('http error: ' + util2.inspect(e));
                    serveCtx.responseData(1, "Service Exception");
                }
            });
        }
    };
};

var responseJsonData = function(ctx, data, cookies) {
    //stringify
    var str = JSON.stringify(data);

    var callback = ctx.getQueryString('cb') || ctx.getQueryString('callback');
    var responseData = callback ? callback + '(' + str + ')' : str;
    var body = new Buffer(responseData, 'UTF-8');
    var setCookieList = util.setCookies(cookies);
    //ctx.response.setHeader('Set-Cookie', setCookieList);
    ctx.response.writeHead(200, {
        'Content-Length': body.length,
        'Content-Type': 'text/html;charset=utf-8',
        'Cache-control': 'no-cache',
        'Set-Cookie': setCookieList
    });
    ctx.response.end(body);
};