var url = require('url'),
    util = require('util'),
    path = require('path'),
    provider = require("fatfei.provider.loader"),
    httpservicehandler = require('./httpservicehandler'),
    wsservicehandler = require('./wsservicehandler');

var settings;

//
// Global route configuration and regex.
//
var httpRouteCfgs = {}, webSocketRoutCfgs = {}, routeRegex = undefined;
exports.init = function() {

    var modules = provider.getAllModuleNames();
    var length = modules.length;
    for (var i = 0; i < length; i++) {
        var name = modules[i];
        var _module = provider[name];

        if (_module[settings.registername]) {
            _module[settings.registername](exports);
        }
    }
};

exports.createProvider = function(config) {
    settings = config;
    return exports;
};

exports.onRequest = function(ctx) {
    var pathname, protocols;
    if (ctx.request && ctx.request.url) {
        try {
            pathname = url.parse(ctx.request.url, true).pathname;
        } catch (e) {
            console.error('parse request url error:' + ctx.request.url);
        }
        protocols = 'http';
    } else if (ctx.header.type) {
        pathname = ctx.header.type;
        protocols = 'websocket';
    }
    if (pathname == '/') { //默认主页
        pathname = settings.defaultPage;
    }
    if (routeRegex && pathname) {
        routeRegex.lastIndex = 0;
        var matching = routeRegex.exec(pathname);
        if (matching && matching[1]) {
            var matchstr = matching[1].toLocaleLowerCase();
            if (protocols == 'http') {
                return httpRouteCfgs[matchstr](ctx);
            } else if (protocols == 'websocket') {
                return webSocketRoutCfgs[matchstr](ctx);
            }

        }
    }
    if (protocols == 'http') {
        ctx.response.writeHead(404, 'File Not Found');
        ctx.response.end();
    }
};

//
// Add handler
// 	@param path 服务响应路径
//  @param callback 服务响应函数
//		原型：其中callback原型为：
//			function(ctx) {}
//		说明：
//			其中ctx请参考readme.txt中的ctx的详细说明
//
exports.addHandler = function( /* path, protocol, callback */ ) {

    var length = arguments.length;
    if (arguments.length == 3) {
        var path = arguments[0],
            protocol = arguments[1],
            callback = arguments[2];
    } else if (arguments.length == 2) {
        var path = arguments[0],
            protocol = 'http',
            callback = arguments[1];
    }

    path = path.toLocaleLowerCase();

    if (protocol == 'http') {
        callback = httpservicehandler(callback);
        httpRouteCfgs[path] = callback;
    } else if (protocol == 'websocket') {
        callback = wsservicehandler(callback);
        webSocketRoutCfgs[path] = callback;
    }
    var paths = [];
    for (var key in httpRouteCfgs) {
        // Convert meta chars
        key = (key + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        paths.push(key);
    }

    for (key in webSocketRoutCfgs) {
        // Convert meta chars
        key = (key + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        paths.push(key);
    }
    routeRegex = new RegExp('^(' + paths.join('|') + ')', 'gi');
};